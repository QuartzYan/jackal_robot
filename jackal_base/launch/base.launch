<?xml version="1.0" encoding="UTF-8"?>
<launch>
 
  <arg name="jackal_port" default="/dev/jackal_base"/>
  <arg name="pub_description" default="true"/>
  <arg name="enable_ekf" default="false"/>

  <group if="$(arg pub_description)">
    <arg name="model" default="$(find xacro)/xacro --inorder $(find jackal_description)/urdf/jackal.urdf.xacro"/>
    <param name="robot_description" command="$(arg model)"/>
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/> -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  </group>

  <!-- jackal harware driver -->
  <node pkg="jackal_base" type="jackal_node" name="jackal_node">
    <rosparam>
      # TODO: Specify these in code rather than here.
      require:
        publishers:
          - status
          - feedback
          - imu/data_raw
          - navsat/nmea_sentence
        subscribers:
          - cmd_drive
          - wifi_connected
    </rosparam>
    <param name="port" value="$(arg jackal_port)" />
    <param name="wireless_interface" value="$(optenv JACKAL_WIRELESS_INTERFACE wlan0)"/>

    <remap from="/jackal_velocity_controller/odom" to="/odom"/>
    <remap from="/jackal_velocity_controller/cmd_vel" to="/cmd_vel"/>
  </node>

  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info"/>

  <!-- Differential controller parameters and basic localization -->
  <include file="$(find jackal_control)/launch/control.launch">
    <arg name="enable_odom_tf" value="false" if="$(arg enable_ekf)"/>
  </include>

  <!-- joy control -->
  <include file="$(find jackal_control)/launch/teleop.launch"/>

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat"/>

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml"/>
  </node>

  <!-- Filter raw gyro data into a usable IMU message -->
  <!-- <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="$(eval optenv('JACKAL_MAG_CONFIG', find('jackal_base')+'/config/mag_config_default.yaml'))"/>
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
    </rosparam>
  </node> -->

  <!-- Robot pose ekf -->
  <group if="$(arg enable_ekf)">
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" output="screen">
      <param name="output_frame" value="odom"/>
      <param name="base_footprint_frame" value="base_footprint"/>
      <param name="freq" value="50.0"/>
      <param name="sensor_timeout" value="0.2"/>
      <param name="odom_used" value="true"/>
      <param name="imu_used" value="true"/>
      <param name="vo_used" value="false"/>
      <param name="debug" value="false"/>
      <param name="self_diagnose" value="false"/>
      <remap from="imu_data" to="/imu/data"/>
      <remap from="odom" to="/odom"/>
    </node>
  </group>

</launch>
